/* 练习题: https://flukeout.github.io/ */


/* 字体相关 */
    /* 
    1. padding and margin:
        2 个值: 上下, 左右
        3 个值: 上 左右 下
        4 个值: 上 右 下 左
    
    
    */



/* 常见选择器 */
    /*  1.元素选择器
            作用：根据<标签名>来选中指定元素
            例子：p{}  h1{}  div{}
    */
    p{
        color:cornflowerblue;
        font-size: 30px;
    }
 
    /*  2.ID选择器：
            例子：#id{}
        3.类选择器：
            例子：.class{}

    */
    #null{
        color:tomato;
    }
    .heads{
        color:greenyellow;
    }
 
    /*  4.通配选择器
            作用：选中全部
            语法：*{}
    */




/* 复合选择器 */
    /* 1. 交集选择器
            作用：同时满足多个条件才被选择
            例子：div.class1.class2{}   .class1.class2.class3{}
    */
    p.apple.watermelon{
        color:red;
    }
    /* 2. 并集选择器(第9题ben
            作用：同时选中多个条件
            例子：h1,h2,p,div{}    .class1,h1,h2,#id{}
    */
    #ABC,.B{
        color:red;
    }
    /* 补充：还可以混合使用
        div.box > span{
            color: red;
        }
    
    */




/* 关系选择器 */
    /* 继承效果：选中1个父类时，其包含的全部子类也会被选中 */
    /* 注意：背景相关、布局相关的样式不会被继承！ */
    
    /* 1. 子元素选择器
            作用：单独选中某一元素的子元素
            语法：父元素 > 子元素 {}
    */
    /* div > span{
        color: red;
    }
    div > p > span{
        color: blue;
    } */

    /* 2. 后代元素选择器
            作用：选中指定元素内的 指定后代元素(全部后代!）
            语法：祖先 后代 {}
    */
    div span{
        color:red;
    }

    /* 3. 兄弟元素选择器 (第12题
            ① 选中下一个兄弟
              语法：A + B {}
            ② 选中后面全部兄弟
              语法：A ~ B {}
    */
    /* p + span{
        color: red;
    }
    p ~ span{
        color: red;
    } */




/* 属性选择器 */
    /* 
        [属性名]            选择含有指定属性的元素
        [属性名=属性值]     选择含有指定属性和属性值的元素
        [属性名^=属性值]    选择以指定属性值为前缀的元素
        [属性名$=属性值]    选择以指定属性值为后缀的元素
        [属性名*=属性值]    选择包含指定属性值的元素（前中后缀均可
    */
    p[title^=pan]{
        color:aqua
    }
    p[title$=case]{   /* 写在后面的会覆盖前面的，所以第二个p是blue而不是aqua */
        color:blue
    }




/* 伪类选择器 */
    /* 
        :first-child    选中第一个元素
        :last-child     选中最后一个元素
        :nth-child()    选中第n个元素
            n   从1到正无穷
            2n  偶数
            2n+1或者odd 奇数
        
        :first-of-type  选中同类型的第一个元素
        :last-of-type   选中同类型的最后一个元素
        :nth-of-type()  选中同类型的第n个元素
    */
    ul > li:first-of-type{ /* 如果用的是first-child，这个红色赋值无法穿越“防火墙” */
        color: red;
    }
    /* 反向选择：
        例子：
        ul > li:not(:nth-child(3)) {
            color : red;
        }
    */



/* 超链接的伪类 */
    /* 1. 正常的连接 */
    a:link{
        color:red;
    }
    /* 2. 访问过的连接 */
    a:visited{ /* 注意：由于隐私问题，访问过的只能设置颜色，且实际上很少使用 */
        color:gray;
    }
    /* 3. 鼠标悬停效果 */
    a:hover{
        color:lightcoral;
        font-size: 20px;
    }
    /* 4. 鼠标点击效果 */
    a:active{
        color:indigo;
    }



/* 伪元素 */
    /* 
        ::first-letter  表示第一个字母
        ::first-line    表示第一行
        ::selection     表示选中的内容
    */
    p#English_reading::first-letter{
        font-size: 40px;
    }
    p#English_reading::first-line{
        color:gainsboro;
    }
    p#English_reading::selection{
        background-color:yellow ;
    }

    /*
        ::before        元素的开始
        ::after         元素的最后
            - 注意：before 和 after 必须结合content属性来使用
    */
    p#English_sentence::before{
        content:'▶';
        color: red;
    }
    p#English_sentence::after{
        content:'◀';
        color: red;
    }
    /* 补充：before 和 after 是通过css产生的，所以内容无法被选中 */



/* 选择器权重 */
    /* 
    !important  最高优先级
    内联样式    1,0,0,0
    id选择器    0,1,0,0
    类和伪类    0,0,1,0
    元素选择    0,0,0,1
    通配选择    0,0,0,0
    继承样式    没有优先级
    */



/* 长度单位 & 颜色值 */
    /* 长度单位 
    像素：
        不同屏幕的像素大小不同，故200px在不同设备下显示大小可能不同 
    
    百分比：
        跟随父元素的像素大小进行改变

    em：
        相当于元素的字体大小来计算
        1em = 10 font-size

    rem：
        相对于根元素的字体大小来计算（HTML）
        em与rem多用于移动端的页面适配！
    */

    /* 颜色值
    RGB值：
        (0,0,0) 表示黑色；(255,255,255) 表示白色
    
    RGBA值：
        最后一个数字是透明度，用0~1的浮点数表示。
        如(128,128,128,.5)表示半透明的灰色

    十六进制的RGB：
        #ff0000 表示正红色
        若字母两两相同可以简写为3位。如 #f00

    HSL值：
        hue         色相    0 - 360
        saturation  饱和度  0 - 100%
        lightness   亮度    0 - 100%
    */